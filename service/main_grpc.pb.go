// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	Channel(ctx context.Context, opts ...grpc.CallOption) (Controller_ChannelClient, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Channel(ctx context.Context, opts ...grpc.CallOption) (Controller_ChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], "/service.Controller/Channel", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerChannelClient{stream}
	return x, nil
}

type Controller_ChannelClient interface {
	Send(*ChannelClientStream) error
	Recv() (*ChannelServerStream, error)
	grpc.ClientStream
}

type controllerChannelClient struct {
	grpc.ClientStream
}

func (x *controllerChannelClient) Send(m *ChannelClientStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerChannelClient) Recv() (*ChannelServerStream, error) {
	m := new(ChannelServerStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	Channel(Controller_ChannelServer) error
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) Channel(Controller_ChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).Channel(&controllerChannelServer{stream})
}

type Controller_ChannelServer interface {
	Send(*ChannelServerStream) error
	Recv() (*ChannelClientStream, error)
	grpc.ServerStream
}

type controllerChannelServer struct {
	grpc.ServerStream
}

func (x *controllerChannelServer) Send(m *ChannelServerStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerChannelServer) Recv() (*ChannelClientStream, error) {
	m := new(ChannelClientStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _Controller_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}
